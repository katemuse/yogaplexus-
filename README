== Yoga Plexus

Yoga Plexus is an online service for yoga teachers and students.  It helps teachers plan their classes,  creating sequences and refreshing their memory of sanskrit and various yoga techniques.  Teachers can submit comments on the asanas (postures) and read up on them.  Each user has a homepage on Yoga Plexus that shows his or her sequences and submissions to various asana pages.  

The asanatrix, or asana sequence panel, is the heart of the application.  There is one form designed to narrow the list of asanas on a second form by type or starting position.  A user can create and name a new sequence, then narrow the list of asanas with the aforementioned form, then click these filtered asana names one at a time to add them their own sequence.  S/he can then rearrange the order of poses in their sequence using drag and drop.  S/he can ‘explode’ any asana in the list to show its basic instructions by clicking “toggle details”, then print out the sequence in a layout specifically styled for print. 

User observations are another “heart” of the application, because these are what allow users to make their mark, turning the app from a simple utility to something that stands out from the rest of the yoga apps out there. User Observations in Yoga Plexus will ultimately be made viewable from everywhere in Yoga Plexus that Asanas appear.  My goal is to provide searchable user observations according to their authors’ schools of yoga.  This will enrich the data immeasurably.  
           
== Author
Catherine Musinsky • 617-223-7822 • cat@katemuse.com

== Background
Yoga practitioners tend to steer clear of computers in favor of the smell of wood, earth and sweat.  It’s no wonder - computers are not the most direct route to tranquility.  On the other hand, all those yoga teachers out there that do have computers would love to have access to a tool not only with which to plan their yoga classes, but also to express their voluminous observations about each asana (posture), to share their meditations on the yogic life, and to kvetch about the problems they encounter and offer advice to one another, about teaching.
Yoga sites tend to be static and not only poorly designed but express the philosophies of a narrow segment of the yogic population.  Yoga practitioners often fall into strict, mutually incurious schools of thought.  It would be healthy for the practice of yoga to introduce a way for these schools of thought to share, even contradict one another.  

== User stories
Chaya is an intellectual yogi.  She likes to impress her students with perfect Sanskrit pronunciations of all the asanas.  She is well versed in the Yoga Sutras, and has studied in India with BKS Iyengar himself.
Jane has a clear mission to teach yoga in an integrated, non-harming style, focusing on developing consciousness over virtuosity.  She has studied Body-Mind-Centering with Bonnie Bainbridge Cohen, and is convinced that a New Synthesis is emerging that will incorporate experiential anatomy, medical science, meditation and asana practice.
John teaches a large power yoga class, and has a huge clientele of busy people who don’t have time for a lot of high-flying yoga philosophy, who want their yoga fast and hot and their philosophy in easily digestible chunks.
Chaya, Jane and John are all users of the Yoga Plexus, an online tool for yoga teachers and practitioners.
Before each class, Chaya goes to her homepage on the Yoga Plexus and sets up the asana sequence for the day.  The asanas are arranged by type, such as backbends, forward bends, standing postures, balances, hip openers, etc, and she can pick and choose from each type she wishes to introduce for the day.  Chaya prefers to focus on one type of asana per class, with a few opposing postures smattered in for balance. She enters the asana sequence panel.  A list of Asana types are listed on the right.  On the left of the screen is her personal sequence template.  She clicks on Standing Postures and a list of standing postures appear. Each time she clicks on an asana it appears under her asana sequence.  She can reorder the postures as she wishes by dragging them with her mouse and dropping them into place.  Once the page is refreshed the numbers update.  When she has completed her sequence she can “explode” each asana in turn, showing in addition to the photo/drawing of the asana, the basic instruction for the pose.
When Chaya gets to headstands she is dismayed to find that the hand hold described is not the way BKS Iyengar would have described it.  She navigates to the Headstand asana page and clicks “write an observation” at the bottom.  A form page appears where she can describes how she would teach the headstand based on Iyengar’s principles.  
When she is done with her sequence she clicks “submit”  and is satisfied to observe that her user observation appears under the exploded explanation for Headstand.  It’s at the bottom of some inferior explanations, but it’s in there all the same.
Jane’s problem was that she’s approaching yoga in such a newfangled way that there is no pre-established “school” that describes what she’s interested in.  She was ecstatic to find in the Yoga Plexus that she could create her own school of yoga.  She entered “jane’s school of tantra” for her default school, and now whenever she creates a  “user observation,” “ jane’s school of tantra” appears as her default school. 


== Features
I implemented the following plugins/recipes/features:
image upload and display using attachment_fu.  An administrator can easily upload images of an asana and they will appear wherever the asana is shown, in an appropriate size. Still to do: I’ve considering letting users upload photos, but stopped short to avoid huge page weights and having to edit out stupid photos.
restful authentication à la John’s screencast.  Still to do: grok some of the more abstruse authentication code.  Implement roles, for god’s sake.  Don’t worry about all the extra files it would necessitate.  I stopped short of implementing roles and permissions because I couldn’t stomach two more models with corresponding files cluttering up the app and making me read them.
Acts-as-list and Ajax drag and drop, with help from Chad Fowler’s Rails Recipes.  This enables a user to quickly and easily change the order of asanas in a sequence.  Still to do: Find a way to update the position numbers immediately upon change in order.   I found, by playing with the acts-as-list, and plenty of googling, that there acts-as-list provide bunch of cool methods to the model, such as :.move_lower, :lower_item, :in_list? etc.  These will provide the basis for a simple non-javascript re-ordering tool for the asana sequencer.
Ajax.  Ajax is used most heavily in the Asanatrix.  It’s used to filter an asana list on the basis of spinal direction and starting positions; 
to add new poses to a sequence; to drag and drop poses in the sequence, as explained above; to provide visual effects that notify the user when something has changed. Scriptaculous’ toggle_blind is used to seemingly open and close drawers of data under each pose listed in a sequence.  

== Still to do
1. Figure out more graceful degrading (see below under “obstacles and hair-falling-out moments”).  This functionality degrades functionally, but not always gracefully, to users with Javascript turned off.  
2. Drying out ajax/nonajax controller actions: using request.xhr? was a DRYer means to condition the app’s response to ajax versus nonajax requests than writing separate, highly redundant methods.   I very much want to “clean up controllers with postback actions” à la Chad Fowler’s “Snack Recipe 33” by Marcel Molina Jr.  Wet and redundant CRUD actions can be merged into single “edit” definitions thusly (updated slightly for Rails 2 by me):
def edit
  @instance = Object.find(params[:id]) || Object.new
  if request.post?
    @instance.attributes = params[:instance]
    redirect_to :main_url and return if @instance.save
  end
end
I’m not sure how this solution handles them all the possible renders/redirects.
3. HTML scraping: Wrote methods in models/asana.rb that successfully leverages Hpricot’s erstwhile competitor Nokogiri to scrape data from a yoga site.  The target’s nonstandard and unpredictable code made it difficult to get all the data using xpath.  After spending an allotted time figuring it out, I have a scraper that gets english and sanskrit asana data from YogaBasics.com.  I made a yml file in an unconventional, probably wrong way by using to_yml but then heavily editing it by hand.  Still to do: With not much extra work I could have used the same functionality to scrape data from YogaJournal.com, a more thorough probably better-structured database, but whose html exposure is equally opaque as YogaBasic’s.  With a little more extra work I would really really like to try scRUBYt!, which leverages Hpricot and Mechanize and obviates the need for complex, often contradictory xpath statements.  You stick in as example of the code you’re after along with a few examples of div id’s or even text you want to scrape, and scRUBYt! does the rest.  It makes my fingers itch just thinking about it!!
This is more of a css thing, but it’s cool so I wanted to mention it... I wrote a simple print.css to control printer output-- important for teachers who want to bring their notes to class with them.  Still to do: implement a to_PDF plugin, if it exists and I think I saw one out there.  Make it real perty.


== Obstacles, bugs and hair-falling-out moments 
The data model was confusingly complex at times, especially while building the “Asanatrix”, or sequence builder.  The intertwined data model along with an intricate web of partials took a long time for me to wrestle into submission (no pun intended).  Please see explanatory notes throughout the project for more details.  
Restful authentication.  Tip to future students: don’t try to change user authentication code!  I added a home page with no problem, but screwed everything up when I tried to “clean up” the generated forms.  In addition the tests abhor my authenticate_as_admin? and is_admin? methods I added to lib/authenticated_system.rb in an attempt to avoid implementing roles.
Graceless degradation of Ajax.  I haven’t yet figured out a way to either show all the data all the time to non-js users.  For example the in the Asanatrix, the div id tagged "asana_details_<%= pose.position %>” (views/sequences/_sequence_list.html.erb, line 49) holds a pose’s basic_instruction within the _asana_details partial.   The asana_details_[#] div needs to be tagged with its css display attribute set to none in order to make the toggle_slide effect (_sequence_list line 20) work correctly.  But this hides the asana_details partial from non-javascript users.  I tried and failed to pass a boolean to the asana_details_<%= pose.position %> specifying that it should only use style=”display:none” when Ajax is used.  Currently the basic-instruction partial opens in a new unstyled page when users click “toggle details” - obviously an unacceptable solution.
Show/hide toggling is working beautifully with Ajax, although I forgot how to hide the jump at the onset of the visual-effect.  Trying to degrade the show/hide details functionality took more than its share of time, especially since the ajax solution (found after much trial and error) was so simple (“toggle_slide”).   I tried a few things to degrade the toggling- the first was a single action to both show and hide, then I tried two different actions, still to no avail.  I think the easiest solution will be to show all the details to everyone who doesn’t use Ajax-- except there’s an as yet unsurmounted problem with this too: the toggle effect counts on the css ‘display’ property.  If you want to fade/slide from invisible to visible you need to add ‘style=”display:none” ’ to the div that is supposed to appear.
User observations were easy enough to implement.  But on the fly permissions took some care and some muddy code.  To prevent one user from editing someone else’s User Observations or Sequences, for example, and lacking user roles, I wrote a lot of if statements in the templates, muddying the separation of logic from presentation.  There may still be a few of these missing, as I haven’t systematically checked the app for such things.  I know, use tests, right?  
Why didn’t I use tests? - And I’m sure I will regret it after this assignment comes back red-inked to the gills.  My excuse, besides running out of time, is that I changed the fixture data (oo - I forgot: that’s another special feature) to represent what was actually in the database, and to save data in an easily recreate-able form (oo-- another special feature: migrating from fixture data!).  I thought this would provide a more accurate representation of the application for testing, but then all the tests that expected scaffolded fixtures failed.  I couldn’t stomach rewriting them.  Also failing were any actions I had written with is_admin? or authorize_as_admin callbacks.  Until I implement user roles and have the time to rewrite all those damn tests, I think I’ll abstain from TTD on this app, anyway.
One thing I found was that (Amy, you were right that) partial forms are a pain in the butt.  I thought the DRYness of partial forms was desirable, but there are so many more critically nonDRY aspects of the current application that would merit more attention.  One of them is the sheer redundancy within controller CRUD actions.  See Drying out ajax/nonajax controller actions, under “Features”, above.  There’s a nice recipe for compressing new/create/edit/update into a single action. 
Another thing I ran into more than a couple of times was the conflict of RESTFUL versus nonrestful routing.  There are still some peculiarities in the app, for example the RESTFUL resource, Asana, still uses nonrestful form tags and partials.  It worked, so I didn’t fix it.  In future, though I will certainly fix these forms, get rid of the partials and make sure they use 100% restful syntax.  Nonrestful syntax didn’t go so well in other forms for some reason: (Tues. Jan 20: “EUREKA!  It turns out the form tags of restful resources were using non-restful syntax.  I resorted to them, unaware of the clear distinction that had to be made between restful and non-restful resource handling.  I did it because I was trying to separate out form partials.. . .  If I have a good eureka moment once a day I’ll keep doing this.  ) 

== Future Directions
In addition to all the things listed under each feature as “Still To Do”, which I won’t repeat here, I’d like in future to add:
1. Blogs.  Each user’s home page will include not only lists of the user’s authored sequences and comments on the asanas, but also a separate user blog where teachers can kvetch and share experiences about teaching.
2. More asana data: In addition to english, sanskrit and basic_instructions, asanas will have the following attributes: variations and modifications of the same asana (these will actually be defined as associations between a much larger pool of asanas using self-referential joins); benefits; contraindications; suggested counterposes; difficulty level1; suggested preparatory poses; suggested follow-up poses; and props and prop usage.  Each of these attributes will be available from wherever asanas are listed in the app, using the same ajax show/hide mechanism that lets users toggle views of basic_instructions now.  
3. User observations will be tagged with the “school” of their authors, and they will be searchable on the basis of these schools as well. UPDATE: "school" should be editable under user observation.  It should default to, but not be tied to, the author's school.
I would welcome collaborators and contributors to anything described here.


